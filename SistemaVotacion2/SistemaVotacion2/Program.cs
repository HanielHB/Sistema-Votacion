



using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore; // Required for DbContext and UseSqlServer/etc.
using SistemaVotacion2.Data; // Required for your DbContext class


using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

var builder = WebApplication.CreateBuilder(args);


// Add services to the container.

// --- 1. Add Controllers (if using Controllers) ---
builder.Services.AddControllers();

// --- 2. Add OpenAPI/Swagger (usually generated by default for Web API projects) ---
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// --- 3. IMPORTANT: Add your DbContext service registration here ---
// Get the connection string from appsettings.json
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

if (string.IsNullOrEmpty(connectionString))
{
    // Handle the case where the connection string is missing or empty
    // You might want to log an error or throw an exception.
    // For demonstration, let's just log and default to an in-memory db or throw.
    Console.WriteLine("ERROR: 'DefaultConnection' connection string is not configured in appsettings.json.");
    // Or you can throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
}

builder.Services.AddDbContext<SistemaVotacion2Context>(options =>
{
    // Configure the database provider. Make sure you have the corresponding NuGet package.
    // For SQL Server:
    options.UseSqlServer(connectionString);
    // For SQLite:
    // options.UseSqlite(connectionString);
    // For PostgreSQL (requires Npgsql.EntityFrameworkCore.PostgreSQL):
    // options.UseNpgsql(connectionString);
});
// --- END DbContext registration ---

var app = builder.Build();

// Configure the HTTP request pipeline.

// --- 1. Configure Swagger/OpenAPI UI (typically enabled in Development) ---
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(); // This enables the Swagger UI at /swagger
}

// --- 2. Other standard middleware ---
app.UseHttpsRedirection();

app.UseAuthorization();

// --- 3. Map your API endpoints ---
app.MapControllers(); // Maps controller-based endpoints
// If you're using Minimal APIs, you'd have app.MapGet, app.MapPost, etc. here

app.Run();